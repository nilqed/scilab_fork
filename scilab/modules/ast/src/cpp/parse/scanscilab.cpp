
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[942] =
    {   0,
    16408,  123,  123,  132,  132,  114,  114,  110,  110,  145,
       84,  144,   80,   84,  144,   81,  144,   81,   84,  144,
       78,   84,  144,   75,   84,  144,   27,   84,  144,   75,
       84,  144,   30,   84,  144,   79,   84,  144,   34,   84,
      144,   35,   84,  144,   48,   84,  144,   47,   84,  144,
       37,   84,  144,   46,   84,  144,   67,   84,  144,   49,
       84,  144,   69,   84,  144,   38,   84,  144,   36,   84,
      144,   60,   84,  144,   64,   84,  144,   61,   84,  144,
       26,   84,  144,   65,   84,  144,   50,   84,  144,   66,
       84,  144,   51,   84,  144,   75,   84,  144,   75,   84,

      144,   75,   84,  144,   75,   84,  144,   75,   84,  144,
       75,   84,  144,   75,   84,  144,   75,   84,  144,   75,
       84,  144,   75,   84,  144,   75,   84,  144,   39,   84,
      144,   32,   84,  144,   40,   84,  144,   26,   84,  144,
       84,  144,   84,  144,   84,  144,   84,  144,   84,  144,
       84,  144,   84,  144,   84,  144,   84,  144,   80,   84,
      144,16408,   75,   84,  144,   27,   84,  144,   75,   84,
      144,   75,   84,  144,   75,   84,  144,   75,   84,  144,
       75,   84,  144,   75,   84,  144,   75,   84,  144,   75,
       84,  144,   75,   84,  144,   75,   84,  144,   75,   84,

      144,   75,   84,  144,   84,  144,   84,  144,   84,  144,
       84,  144,   84,  144,   84,  144,   84,  144,   84,  144,
       84,  144,  123,  124,  144,  122,  144,  122,  124,  144,
      121,  124,  144,  120,  124,  144,  124,  144,  132,  133,
      144,  131,  144,  131,  133,  144,  129,  133,  144,  130,
      133,  144,  133,  144,  114,  115,  144,  113,  144,  113,
      115,  144,  115,  144,  115,  144,  110,  144,  109,  144,
      109,  144,  108,  144,  107,  108,  144,  104,  144,  104,
      108,  144,  108,  144,   99,  144,   80,   99,  144,   89,
      144,   89,   99,  144,   78,   99,  144,   75,   99,  144,

       27,   99,  144,   75,   99,  144,   30,   99,  144,   79,
       99,  144,   85,   99,  144,   86,   99,  144,   48,   99,
      144,   93,   99,  144,   37,   99,  144,   95,   99,  144,
       67,   99,  144,   49,   99,  144,   69,   99,  144,   38,
       88,   99,  144,   36,   99,  144,   60,   99,  144,   64,
       99,  144,   61,   99,  144,   26,   99,  144,   65,   99,
      144,   50,   99,  144,   91,   99,  144,   51,   99,  144,
       39,   99,  144,   32,   99,  144,   92,   99,  144,   26,
       99,  144,   99,  144,   99,  144,   99,  144,   99,  144,
       99,  144,   99,  144,   99,  144,   99,  144,  143,  144,

      134,  144,  137,  144,  137,  144,   78,  144,   79,  144,
      139,  143,  144,  136,  144,  143,  144,  135,  144,  140,
      143,  144,  138,  143,  144,  141,  143,  144,  142,  143,
      144,  144,   25,  144,  144,   25,  144,  144,   25,  144,
       25,  144,   25,  144,   25,  144,   25,  144,   25,  144,
       25,  144,   25,  144,   25,  144,   25,  144,   25,  144,
      144,  144,  144,  144,  144,  144,  144,  144,   80,   82,
       82,   81,   75,   75,    3,   29,   75,    2,   28,   75,
       31,   51,   41,   42,   68,   43,   74,   44,   45,   76,
       77,   73,   69,   62,   59,   58,   63,   75,   75,   75,

       17,   75,   75,   75,   75,   75,    4,   75,   75,   75,
       75,   75,   75,   75,   75,   33,   75,   80,16408,   75,
       75,    3,   29,   75,    2,   28,   75,   75,   75,   75,
       17,   75,   75,   75,   75,   75,    4,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  123,  122,  116,  117,
      118,  119,  132,  131,  125,  126,  127,  128,  114,  113,
      111,  112,  110,  109,  107,  104,  105,  106,   80,   90,
       87,   97,   98,   88,   89,   29,   75,   28,   75,  102,
       88,  143,  134,  137,   76,  143,   77,  143,   25,   25,
        3,   25,    2,   25,   25,   25,   25,   17,   25,   25,

       25,   25,   25,    4,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   83,   83,   55,   52,   53,   54,   56,
       72,   73,   70,   71,   57,   75,   75,   75,   75,   75,
        8,   75,   15,   75,   75,   75,   75,   75,   75,   75,
       75,   20,   75,   75,    1,   75, 8216, 8216,   75,   75,
       75,   75,   75,    8,   75,   15,   75,   75,   75,   75,
       75,   75,   75,   75,   20,   75,   75,    1,   75,   94,
       96,  103,  100,  101,   25,   25,   25,   25,   25,    8,
       25,   15,   25,   25,   25,   25,   25,   25,   25,   25,
       20,   25,   25,   75,   12,   75,   75,   75,    6,   75,

       75,   75,   75,   75,   75,   75,   75,    5,   75,   75,
        1,    1,   75,    1,    1,    1,    1,    1,    1,    1,
        1,   75, 8216,   75,   12,   75,   75,   75,    6,   75,
       75,   75,   75,   75,   75,   75,   75,    5,   75,   75,
        1,    1,   75,    1,    1,    1,    1,    1,    1,    1,
        1,   75,   25,   12,   25,   25,   25,    6,   25,   25,
       25,   25,   25,   25,   25,   25,    5,   25,   25,   25,
       75,   75,   18,   75,   21,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   16,   75,    1,    1,    1,
        1,    1,    1,    1,   75,   75,   18,   75,   21,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   16,
       75,    1, 8216,    1, 8216,    1,    1,    1,    1,    1,
        1,    1,   25,   25,   18,   25,   21,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   16,   25,   75,
        7,   75,   75,   75,   75,   23,   75,   22,   75,    9,
       75,   10,   75,    1,    1,    1,   75,    7,   75,   75,
       75,   75,   23,   75,   22,   75,    9,   75,   10,   75,
        1, 8216,    1,    1,    1,   25,    7,   25,   25,   25,
       25,   23,   25,   22,   25,    9,   25,   10,   25,   75,
       75,   75,   75,    1,   75,   75,   75,   75,   75,    1,

       75,   25,   25,   25,   25,   19,   75,   75,   13,   75,
       75,   19,   75,   75,   13,   75,   75,   19,   25,   25,
       13,   25,   25,   75,   11,   75,   75,   11,   75,   25,
       11,   25,   75,   75,   25,   14,   75,   14,   75,   14,
       25
    } ;

static yyconst flex_int16_t yy_accept[811] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  143,  145,  147,  149,  151,  153,
      155,  157,  159,  163,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  205,  207,  209,
      211,  213,  215,  217,  219,  221,  223,  226,  228,  231,

      234,  237,  239,  242,  244,  247,  250,  253,  255,  258,
      260,  263,  265,  267,  269,  271,  273,  275,  278,  280,
      283,  285,  287,  290,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      340,  344,  347,  350,  353,  356,  359,  362,  365,  368,
      371,  374,  377,  380,  383,  385,  387,  389,  391,  393,
      395,  397,  399,  401,  403,  405,  407,  409,  411,  414,
      416,  418,  420,  423,  426,  429,  432,  433,  435,  436,
      438,  439,  441,  443,  445,  447,  449,  451,  453,  455,
      457,  459,  461,  462,  463,  464,  465,  466,  467,  468,

      469,  470,  471,  472,  472,  472,  473,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  478,  481,  482,  483,  483,
      484,  485,  486,  487,  488,  489,  490,  491,  491,  492,
      493,  494,  494,  494,  494,  495,  496,  496,  497,  497,
      498,  498,  498,  499,  500,  501,  503,  504,  505,  506,
      507,  509,  510,  511,  512,  513,  514,  515,  516,  517,
      517,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      525,  528,  529,  530,  531,  533,  534,  535,  536,  537,
      539,  540,  541,  542,  543,  544,  545,  546,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  560,
      561,  562,  563,  564,  565,  566,  567,  568,  569,  570,
      571,  572,  573,  574,  574,  575,  576,  578,  580,  580,
      580,  581,  582,  583,  584,  585,  587,  589,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  593,  595,  596,  597,

      598,  600,  601,  602,  603,  604,  606,  607,  608,  609,
      610,  611,  612,  613,  614,  614,  614,  614,  614,  614,
      614,  614,  615,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  617,  618,
      619,  620,  621,  622,  623,  623,  624,  624,  625,  626,
      627,  628,  629,  630,  631,  633,  635,  636,  637,  638,
      639,  640,  641,  642,  644,  645,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  648,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  650,  651,  652,  653,  654,  656,  658,  659,  660,
      661,  662,  663,  664,  665,  667,  668,  670,  670,  670,
      670,  671,  672,  673,  674,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      676,  677,  678,  679,  680,  682,  684,  685,  686,  687,
      688,  689,  690,  691,  693,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  697,  698,  699,  701,
      702,  703,  704,  705,  706,  707,  708,  710,  711,  712,
      714,  715,  716,  717,  718,  719,  720,  721,  722,  723,

      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  724,  724,  724,
      724,  724,  724,  724,  725,  727,  728,  729,  731,  732,
      733,  734,  735,  736,  737,  738,  740,  741,  742,  744,
      745,  746,  747,  748,  749,  750,  751,  752,  753,  753,
      753,  753,  753,  753,  753,  754,  756,  757,  758,  760,
      761,  762,  763,  764,  765,  766,  767,  769,  770,  771,
      772,  773,  775,  777,  778,  779,  780,  781,  782,  783,
      784,  785,  786,  788,  789,  790,  791,  792,  793,  794,
      795,  795,  795,  795,  795,  795,  795,  795,  796,  797,

      799,  801,  802,  803,  804,  805,  806,  807,  808,  809,
      810,  812,  814,  816,  817,  818,  819,  820,  821,  822,
      823,  824,  825,  827,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  840,  841,  843,  844,  845,  846,
      848,  850,  852,  854,  855,  856,  857,  857,  857,  858,
      860,  861,  862,  863,  865,  867,  869,  871,  873,  874,
      875,  876,  877,  879,  880,  881,  882,  884,  886,  888,
      890,  891,  892,  893,  894,  896,  897,  898,  899,  900,
      902,  903,  904,  905,  906,  908,  909,  911,  912,  914,
      915,  917,  918,  920,  921,  923,  924,  925,  927,  928,

      930,  931,  933,  934,  935,  936,  938,  940,  942,  942
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    6,   25,    6,    6,    6,   26,   27,   28,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,   29,    6,    6,    6,    6,    6,    6,
       30,   31,   32,   33,    6,    1,   34,   35,   36,   37,

       38,   39,    6,   40,   41,    6,   42,   43,   44,   45,
       46,    6,    6,   47,   48,   49,   50,    6,   51,    6,
       52,    6,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   60,   59,   59,   59,
       61,    1,    1,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   65,   66,   67,   68,
       69,   69,   69,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    2,    3,    4,    5,    6,    6,    7,    1,    5,
        8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
       10,    8,    8,    8,    1,    6,    6,    6,    6,    1,
        1,    1,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6
    } ;

static yyconst flex_int16_t yy_base[836] =
    {   0,
        0,   70,  138,  141,  149,  157,  160,  166,  146,  153,
      173,  178,  196,    0,  265,  320,  376,    0, 1083, 4159,
      183,  270,  279, 4159,  239,  248,  419, 1070, 4159, 4159,
     4159,  155, 4159, 4159, 4159,  336,  175,  310, 4159, 4159,
      269,  272,  275,  276, 4159, 1056, 4159, 4159,  311,  421,
      423,  323,  425,  451,  463,  465,  467,  470,  492, 4159,
     1017, 4159,  454,  465,  273,  476,  132,  485,  490,  469,
      495, 1007,  555,  505,  514,  624,  557,  559,  561,  599,
      563,  601,  606,  608,  630,  636,  667,  640,  304,  651,
      137,  660,  665,  505,  670, 1000,    0, 4159, 1042,  274,

      351, 4159,    0, 4159, 1035,  365,  456, 4159,    0, 4159,
     1031,  950,  952,    0, 4159,  953, 4159,  907, 4159,  902,
      460, 4159,  730,  639,  659, 4159,  709,  697,  740,  894,
     4159, 4159, 4159,  446,  878, 4159,  876,  763,  598,  766,
      885, 4159,  537,  474,  647,  649, 4159,  864, 4159, 4159,
     4159,  825, 4159,  654,  694,  572,  740,  239,  748,  644,
      753,  805,    0,  850, 4159,  845, 4159, 4159,    0, 4159,
      495, 4159,    0,    0,    0,    0, 4159,  753,  762,  805,
      581,  808,  812,  810,  837,  814,  849,  855,  861,  863,
      868,  890,  863,  654,  874,  262,  883,  867,  888,  788,

      768, 4159,  799,  948,  951,  955,  932,  925,  727,  930,
      316,  935,  919,  940,  727,    0,  945,  877,  950,  609,
      955,  959,  964,  718,  998, 1000, 4159, 4159,    0, 4159,
      498,  732,  728, 1014,  722, 4159, 4159,    0, 4159, 1017,
     1039,  897,  948,  733, 4159, 4159,  772, 4159,  883, 4159,
     1030,    0, 1031, 1033, 1039, 1046, 1058, 1061, 1064, 1073,
     1076, 1080, 1088, 1095, 1102, 1111, 1117, 1124, 4159, 1040,
     1119, 1117, 1122, 1127, 1132, 1137, 1142, 1147, 1152, 1212,
     1159, 1168, 1182,  914, 1187,  685, 1192, 1196, 1201,  679,
     1261, 1244, 1207, 1111, 1230,  720, 1237, 1241, 1246,  627,

     1267, 1251, 1254, 1261,  733, 1266, 1280, 1285,  625, 1319,
     1321, 1323, 1325, 1337, 1328, 1350, 1355, 1362, 1367, 1374,
     1379, 1386, 1393, 1398, 1402, 1415, 1417, 1420, 1413, 1418,
     1423, 1428, 1433, 1438, 1443, 1448,    0, 4159, 4159, 4159,
     4159, 4159,    0, 4159, 4159, 4159, 4159, 4159,    0, 4159,
     4159, 4159,    0, 4159,  676, 4159, 4159, 4159, 1508, 4159,
     4159,  833, 1029,  654,  641, 1511, 1488, 1492,  622,  597,
      586,  599,    0,  595, 4159,    0,    0, 1501, 1485, 1401,
     1494,  901, 1499, 1475, 1504,  538, 1504, 1518, 1488, 1523,
     1075, 1528, 1532, 1537,  483, 1571, 1573, 1575, 1577, 1589,

     1580, 1602, 1607, 1614, 1619, 1626, 1631, 1638, 1645, 1650,
     1654, 1667, 1669, 1672, 1665, 1670, 1675, 1680, 1685, 1690,
     1695, 4159,  535, 1700, 1705, 1710, 1715, 1720, 1725, 1730,
     1735, 1740, 1745, 1750, 1755, 1760, 1765, 4159, 4159, 4159,
     4159, 4159, 4159, 1808,  482,  446,  438,  352, 4159, 1802,
     1800, 1804, 1819, 1826, 1828, 1831, 1833, 1845, 1850, 1857,
     1859, 1862, 1864, 1876, 1888, 1937, 1861, 1875, 1951, 2011,
     1957, 1653, 1962, 1097, 1967, 1971, 1976,  302, 2036, 1982,
     1869, 1987, 1160, 1992, 1996, 2001,  300, 2006, 2011, 2025,
     2030, 2035, 2050, 2055, 4159, 2115, 2061, 2074, 2083, 2088,

     2093, 2098, 2103, 2108, 2113, 2118, 2123, 2128, 2133, 2138,
     2172, 2174, 2179, 2181, 2188, 2196, 2203, 2205, 2210, 2218,
     2222, 2227, 2234, 2241, 2246, 2249, 2298, 2312, 2317, 2322,
      326,  324,  256,  166,  154, 2327, 2332, 2337, 2342, 2347,
     2352, 2357, 2362, 2367, 2372, 2377, 2382, 2387, 2392, 2426,
     2428, 2433, 2435, 2442, 2450, 2457, 2459, 2464, 2472, 2476,
     2481, 2488, 2495, 2500, 2503, 2496, 2501, 2506, 2511, 2516,
     2521, 2526, 2531, 2536, 2570, 2572, 2574, 2576, 2579, 2598,
     2601, 2604, 2610, 2613, 2627, 2629, 2641, 2643,    0,    0,
     2626, 2064, 2636, 1213, 2641, 2645, 2650,  108, 2684, 2657,

     2667, 2677, 2682, 2687, 2692, 2697, 2702, 2707, 2712, 2717,
     2722, 2727, 2732, 2737, 2742, 2747, 2807, 2753, 2766, 2775,
     2780, 2785, 2790, 2824, 2826, 2828, 2830, 2833, 2852, 2855,
     2858, 2864, 2867, 2881, 2883, 2895, 2897, 2926,    0, 2895,
     2068, 2900, 1227, 2905, 2661, 2910,   90, 2944, 2917, 2927,
     2937, 2942, 2947, 2952, 2986, 2988, 2990, 2992, 2995, 3014,
     3017, 3020, 3026, 3029, 3043, 3045, 3057, 3059, 3061, 3073,
        0, 3075, 3087, 3089, 3091, 3103, 3115, 3118, 3121, 3133,
     3137, 3145, 3151, 3138, 3144, 3149, 3154, 3159, 3164, 3169,
     3174, 3179, 3184, 3189, 3194, 3199,    0, 3233,    0, 3235,

     3237, 3240, 3242, 3249, 3264, 3267, 3271, 3283, 3286, 3298,
     3295,    0, 3327, 3282, 3294, 3299, 3304, 3309, 3314, 3319,
     3353,    0, 3355, 3357, 3360, 3362, 3369, 3384, 3387, 3391,
     3403, 3406, 3418, 3415, 3421, 3433, 3437, 3446, 3440, 3449,
     3455, 3462, 3468, 3455, 3461, 3466,    0,    0, 3500, 3502,
     3504, 3506, 3518, 3509, 3532, 3534, 3536, 3566, 3519, 3533,
     3538, 3572, 3574, 3576, 3578, 3590, 3581, 3604, 3606, 3608,
     3612, 3620, 3634, 3636,    0, 3638, 3642, 3660, 3664,    0,
     3668, 3672, 3686, 3690, 3694, 3708, 3712, 3716, 3724, 3730,
     3738, 3746, 3752, 3761, 3754, 3768, 3770, 3776, 3783, 3785,

     3792, 3798, 3807, 3814, 3816, 3811, 3829, 3838, 4159, 3887,
     3899, 3911, 3923, 3935, 3947, 3954, 3961, 3972, 3978, 3985,
     3997, 4009, 4021, 4033, 4045, 4052, 4059, 4071, 4082, 4093,
     4103, 4110, 4122, 4134, 4146
    } ;

static yyconst flex_int16_t yy_def[836] =
    {   0,
      809,  809,  810,  810,  811,  811,  812,  812,  813,  813,
      814,  814,  809,   13,  815,  815,  809,   17,  809,  809,
      809,  809,  809,  809,  816,  817,  816,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  818,  819,  820,  819,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  821,  809,  809,  809,

      809,  809,  822,  809,  809,  809,  809,  809,  823,  809,
      809,  809,  809,  824,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,   27,  817,   27,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  825,  809,  809,  809,  809,  809,  825,  809,
      825,  809,  825,  825,  825,  825,  809,  826,  827,  826,
      809,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,   27,  809,  809,  809,
      809,  809,  809,  809,  809,  128,  809,  809,  809,  809,
      809,  809,  809,  809,   27,   27,  809,  809,  828,  809,
      809,  809,  809,  809,  809,  809,  809,  829,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  830,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  809,  809,
       27,  809,  809,  809,  809,  809,  809,  809,  809,  818,
      831,  832,  809,  809,  809,  809,  809,  809,  809,  809,
      833,   76,  809,  809,  809,  809,  809,  809,  809,  809,

      820,  809,  809,  809,  809,  809,  809,  809,  809,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  809,  809,
      809,  809,  809,  809,  809,  809,  821,  809,  809,  809,
      809,  809,  822,  809,  809,  809,  809,  809,  823,  809,
      809,  809,  824,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,   27,   27,  809,  809,
      809,  809,  825,  809,  809,  825,  825,  180,  809,  809,
      809,  809,  809,  809,  809,  809,  827,  809,  809,  809,
      809,  809,  809,  809,  809,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,  809,  809,  809,  809,  831,
      809,  809,  809,  809,  809,  809,  809,  809,  832,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  833,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  809,  809,  809,  809,  809,
      809,  809,  809,  809,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  834,  466,
      834,  834,  834,  834,  834,  834,  834,  834,   27,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  833,  809,  809,  809,
      809,  809,  809,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  835,  527,  834,
      834,  834,  834,  834,  834,  834,  834,   76,  809,  809,
      809,  809,  809,  809,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,   27,
      128,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  834,  834,  834,  834,  834,  834,  834,
      809,  809,  809,  809,  809,  809,  470,   76,  301,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  834,  835,  834,  834,  834,  834,  834,  834,  834,
      180,  387,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  834,  834,  834,  470,  479,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  835,  834,  834,
      834,  180,  180,  180,  180,  180,  180,  180,  180,  180,
       27,   27,   27,   27,  466,   76,   76,   76,   76,  527,
      180,  180,  180,  180,   27,   27,   27,   27,   76,   76,
       76,   76,  180,  180,  180,  180,   27,   27,   76,   76,

      180,  180,   27,   76,  180,   27,   76,  180,    0,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809
    } ;

static yyconst flex_int16_t yy_nxt[4230] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   25,   25,   25,   25,   45,
       46,   47,   48,   25,   49,   50,   51,   52,   53,   25,
       54,   25,   25,   25,   25,   55,   56,   57,   58,   25,
       59,   25,   60,   61,   62,   63,   20,   20,   20,   20,
       20,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       20,   73,   22,   23,   24,   74,   75,   76,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   74,   74,   74,   74,   45,

       46,   47,   48,   74,   77,   78,   79,   80,   81,   74,
       82,   74,   74,   74,   74,   83,   84,   85,   86,   74,
       87,   74,   60,   61,   62,   63,   20,   20,   20,   20,
       20,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       98,   99,  100,   98,   99,  100,  720,  101,  115,  116,
      101,  104,  105,  106,  102,  115,  116,  102,  107,  104,
      105,  106,  110,  111,  690,  108,  107,  228,  110,  111,
      535,  229,  112,  108,  118,  119,  120,  113,  112,  118,
      119,  120,  534,  113,  201,  202,  203,  237,  274,  274,
      121,  238,  239,  331,  331,  121,  122,  123,  124,  125,

      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  127,  127,  127,  127,  147,  148,  149,  150,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  151,  152,
      153,  154,  122,  122,  122,  122,  122,  155,  156,  157,
      158,  159,  159,  160,  161,  162,  164,  165,  166,  167,
      244,  204,  533,  247,  168,  169,  249,  251,  339,  170,
      204,  206,  171,  340,  205,  172,  173,  174,  175,  176,
      205,  245,  246,  205,  248,  274,  274,  250,  246,  205,

      208,  209,  210,  211,  212,  212,  213,  214,  215,  217,
      218,  219,  220,  221,  221,  222,  223,  224,  417,  417,
      176,  164,  165,  166,  167,  532,  240,  531,  241,  168,
      169,  272,  272,  272,  170,  242,  243,  171,  207,  207,
      172,  173,  174,  175,  176,  230,  242,  243,  231,  207,
      207,  207,  232,  233,  234,  341,  613,  253,  606,  207,
      342,  207,  329,  329,  329,  257,  235,  258,  236,  345,
      448,  207,  426,  426,  346,  176,  177,  177,  177,  177,
      177,  178,  179,  180,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  181,  177,  177,  177,  177,  177,  177,

      177,  178,  178,  178,  178,  177,  177,  177,  177,  178,
      182,  183,  184,  185,  186,  178,  187,  178,  178,  178,
      178,  188,  189,  190,  191,  178,  192,  178,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  193,  194,  195,
      196,  197,  197,  198,  199,  200,  225,  226,  207,  207,
      207,  207,  207,  207,  254,  270,  448,  225,  228,  207,
      347,  207,  229,  207,  446,  348,  255,  226,  256,  207,
      259,  207,  357,  207,  260,  247,  246,  358,  207,  207,
      208,  209,  210,  211,  212,  212,  213,  214,  215,  261,
      207,  207,  207,  207,  207,  207,  248,  207,  207,  207,

      446,  207,  263,  207,  264,  207,  291,  376,  207,  266,
      236,  262,  377,  207,  439,  207,  267,  265,  207,  207,
      207,  271,  271,  271,  271,  271,  277,  277,  277,  277,
      207,  268,  273,  273,  273,  273,  273,  422,  244,  549,
      207,  275,  275,  275,  275,  275,  275,  275,  275,  276,
      275,  278,  278,  278,  278,  278,  280,  202,  203,  245,
      246,  282,  334,  334,  334,  334,  293,  294,  295,  296,
      297,  297,  298,  299,  300,  302,  303,  304,  305,  306,
      306,  307,  308,  309,  292,  292,  292,  292,  292,  292,
      292,  292,  313,  237,  542,  292,  374,  292,  239,  292,

      372,  292,  371,  312,  314,  292,  315,  292,  318,  292,
      237,  292,  319,  535,  238,  239,  283,  284,  285,  286,
      287,  287,  288,  289,  290,  291,  292,  292,  292,  292,
      272,  272,  272,  292,  292,  292,  292,  292,  534,  320,
      204,  316,  372,  317,  292,  322,  292,  292,  249,  292,
      251,  310,  311,  205,  321,  270,  292,  292,  292,  205,
      204,  366,  310,  292,  292,  433,  433,  323,  292,  250,
      533,  246,  311,  205,  292,  325,  246,  355,  292,  205,
      324,  510,  326,  503,  292,  293,  294,  295,  296,  297,
      297,  298,  299,  300,  292,  292,  328,  328,  328,  328,

      328,  277,  277,  277,  277,  292,  327,  330,  330,  330,
      330,  330,  415,  415,  415,  292,  332,  332,  332,  332,
      332,  332,  332,  332,  333,  332,  335,  335,  335,  335,
      335,  359,  202,  203,  244,  494,  207,  207,  441,  360,
      361,  490,  490,  362,  440,  363,  364,  207,  232,  365,
      271,  271,  271,  271,  271,  245,  246,  207,  217,  218,
      219,  220,  221,  221,  222,  223,  224,  367,  368,  201,
      202,  203,  230,  247,  437,  231,  499,  499,  367,  371,
      233,  234,  240,  430,  241,  424,  424,  424,  368,  506,
      506,  242,  243,  235,  248,  236,  273,  273,  273,  273,

      273,  202,  242,  243,  275,  275,  275,  275,  275,  278,
      278,  278,  278,  278,  379,  380,  381,  382,  383,  383,
      384,  385,  386,  388,  389,  390,  391,  392,  392,  393,
      394,  395,  396,  397,  531,  378,  378,  378,  378,  378,
      378,  378,  378,  396,  421,  399,  378,  375,  378,  369,
      378,  374,  378,  397,  398,  401,  378,  400,  378,  404,
      378,  279,  378,  405,  378,  378,  379,  380,  381,  382,
      383,  383,  384,  385,  386,  378,  378,  378,  269,  402,
      252,  403,  378,  378,  249,  378,  372,  406,  378,  378,
      378,  378,  370,  378,  369,  378,  378,  378,  408,  378,

      409,  378,  227,  407,  356,  250,  378,  411,  355,  378,
      445,  378,  445,  410,  412,  446,  378,  378,  378,  414,
      414,  414,  414,  414,  419,  419,  419,  419,  378,  413,
      416,  416,  416,  416,  416,  431,  431,  431,  378,  418,
      418,  418,  418,  418,  420,  420,  420,  420,  420,  204,
      422,  423,  204,  422,  423,  354,  204,  538,  538,  207,
      207,  447,  205,  447,  352,  205,  448,  351,  205,  205,
      207,  205,  488,  488,  488,  205,  428,  428,  428,  428,
      207,  207,  207,  207,  207,  207,  425,  425,  425,  425,
      425,  427,  427,  427,  427,  427,  429,  429,  429,  429,

      429,  216,  216,  216,  216,  216,  432,  432,  432,  432,
      432,  434,  434,  434,  434,  434,  435,  435,  435,  435,
      436,  436,  436,  436,  436,  207,  207,  207,  207,  443,
      532,  251,  234,  350,  443,  444,  207,  344,  207,  242,
      243,  270,  242,  243,  338,  370,  207,  443,  207,  443,
      242,  243,  246,  242,  243,  240,  336,  241,  207,  207,
      207,  207,  246,  279,  242,  243,  207,  207,  450,  207,
      269,  207,  252,  207,  207,  242,  243,  207,  227,  207,
      451,  452,  809,  453,  207,  207,  207,  207,  207,  207,
      809,  207,  207,  809,  207,  809,  207,  455,  809,  207,

      207,  207,  207,  207,  207,  454,  207,  207,  207,  207,
      456,  207,  207,  809,  207,  207,  207,  457,  207,  458,
      809,  207,  207,  207,  207,  809,  207,  809,  207,  207,
      207,  545,  545,  207,  809,  459,  460,  461,  207,  207,
      207,  809,  462,  207,  207,  207,  207,  207,  463,  207,
      207,  207,  207,  602,  602,  207,  809,  207,  809,  207,
      291,  809,  207,  809,  465,  207,  809,  207,  464,  497,
      497,  497,  207,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  466,  467,  467,

      467,  467,  467,  468,  468,  468,  468,  468,  469,  469,
      469,  469,  469,  280,  202,  203,  609,  609,  282,  809,
      471,  472,  473,  474,  475,  475,  476,  477,  478,  480,
      481,  482,  483,  484,  484,  485,  486,  487,  281,  281,
      281,  281,  281,  489,  489,  489,  489,  489,  491,  491,
      491,  491,  491,  492,  492,  492,  492,  493,  493,  493,
      493,  493,  291,  292,  292,  292,  292,  292,  291,  686,
      686,  292,  292,  283,  284,  285,  286,  287,  287,  288,
      289,  290,  292,  716,  716,  496,  498,  498,  498,  498,
      498,  809,  292,  500,  500,  500,  500,  500,  501,  501,

      501,  501,  502,  502,  502,  502,  502,  301,  301,  301,
      301,  301,  504,  504,  504,  809,  496,  505,  505,  505,
      505,  505,  507,  507,  507,  507,  507,  809,  302,  303,
      304,  305,  306,  306,  307,  308,  309,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  292,  292,  292,  292,
      292,  292,  292,  292,  809,  292,  292,  292,  809,  292,
      511,  292,  809,  292,  292,  292,  292,  292,  809,  292,
      809,  292,  512,  513,  809,  292,  292,  292,  292,  809,
      809,  514,  292,  292,  809,  292,  809,  809,  292,  292,
      292,  516,  809,  292,  292,  292,  809,  515,  292,  809,

      292,  292,  292,  292,  809,  292,  292,  292,  517,  809,
      292,  518,  292,  292,  292,  292,  809,  292,  519,  809,
      292,  292,  292,  809,  292,  292,  292,  292,  809,  292,
      292,  292,  809,  520,  521,  522,  292,  809,  523,  524,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  809,
      292,  809,  809,  292,  809,  292,  809,  526,  292,  536,
      536,  536,  809,  292,  809,  292,  525,  809,  292,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  527,  528,  528,  528,  528,  528,  529,

      529,  529,  529,  529,  530,  530,  530,  530,  530,  359,
      202,  203,  204,  809,  809,  207,  207,  360,  361,  207,
      207,  362,  809,  363,  364,  205,  207,  365,  378,  378,
      207,  205,  540,  540,  540,  540,  207,  809,  809,  378,
      207,  378,  378,  378,  378,  378,  543,  543,  543,  378,
      537,  537,  537,  537,  537,  539,  539,  539,  539,  539,
      541,  541,  541,  541,  541,  388,  389,  390,  391,  392,
      392,  393,  394,  395,  387,  387,  387,  387,  387,  544,
      544,  544,  544,  544,  546,  546,  546,  546,  546,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  378,  378,

      378,  378,  378,  378,  378,  378,  809,  378,  378,  378,
      809,  378,  550,  378,  809,  378,  378,  378,  378,  378,
      809,  378,  809,  378,  551,  552,  809,  378,  378,  378,
      378,  809,  809,  553,  378,  378,  809,  378,  809,  809,
      378,  378,  378,  555,  809,  378,  378,  378,  809,  554,
      378,  809,  378,  378,  378,  378,  809,  378,  378,  378,
      556,  809,  378,  557,  378,  378,  378,  378,  809,  378,
      558,  809,  378,  378,  378,  809,  378,  378,  378,  378,
      809,  378,  378,  378,  809,  559,  560,  561,  378,  809,
      562,  563,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  809,  378,  809,  809,  378,  809,  378,  809,  565,
      378,  600,  600,  600,  809,  378,  809,  378,  564,  809,
      378,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  566,  566,  566,  566,  566,  567,  567,  567,  567,
      567,  568,  568,  568,  568,  568,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  569,  569,  569,  569,
      569,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  572,  572,  572,  572,  572,  573,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  444,  207,  207,  207,
      207,  207,  207,  242,  243,  575,  809,  576,  207,  577,
      207,  809,  207,  809,  242,  243,  207,  207,  207,  809,
      207,  809,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  809,  579,  207,  809,  580,  578,  581,  207,
      809,  207,  207,  207,  207,  809,  207,  207,  207,  207,
      809,  207,  582,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  809,  207,  585,  207,  207,  583,

      207,  809,  207,  207,  207,  207,  584,  207,  587,  809,
      586,  809,  207,  809,  207,  207,  207,  599,  599,  599,
      599,  599,  809,  809,  207,  809,  207,  607,  607,  607,
      588,  599,  599,  599,  599,  599,  207,  589,  589,  809,
      589,  589,  590,  590,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  590,  589,  589,  589,  589,
      589,  589,  590,  590,  590,  590,  589,  589,  589,  589,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  591,  592,

      593,  594,  595,  595,  596,  597,  598,  599,  599,  599,
      599,  599,  291,  470,  470,  470,  470,  470,  601,  601,
      601,  601,  601,  603,  603,  603,  603,  603,  604,  604,
      604,  604,  605,  605,  605,  605,  605,  291,  479,  479,
      479,  479,  479,  608,  608,  608,  608,  608,  610,  610,
      610,  610,  610,  611,  611,  611,  611,  612,  612,  612,
      612,  612,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  471,  472,  473,  474,  475,  475,  476,  477,
      478,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  614,  614,  614,  614,  614,  809,  480,  481,  482,

      483,  484,  484,  485,  486,  487,  615,  615,  615,  615,
      615,  616,  616,  616,  616,  616,  617,  292,  292,  292,
      292,  292,  684,  684,  684,  495,  714,  714,  714,  495,
      292,  292,  292,  292,  292,  495,  495,  809,  495,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  618,
      618,  618,  618,  618,  619,  619,  619,  619,  619,  620,
      620,  620,  620,  620,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  621,  621,  621,  621,  621,  622,
      622,  622,  622,  622,  623,  623,  623,  623,  623,  292,

      292,  292,  292,  809,  809,  624,  292,  292,  292,  292,
      292,  625,  292,  809,  626,  292,  292,  292,  809,  292,
      292,  809,  292,  292,  292,  628,  292,  292,  809,  627,
      292,  292,  292,  292,  629,  809,  292,  292,  292,  809,
      630,  292,  809,  292,  292,  292,  292,  631,  292,  292,
      292,  292,  809,  292,  292,  292,  292,  809,  292,  809,
      292,  292,  292,  809,  634,  292,  292,  632,  292,  292,
      292,  633,  292,  292,  292,  292,  292,  292,  809,  292,
      809,  809,  635,  809,  292,  636,  809,  292,  809,  292,
      809,  637,  809,  809,  292,  809,  809,  292,  589,  638,

      809,  589,  589,  639,  639,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  639,  589,  589,  589,
      589,  589,  589,  639,  639,  639,  639,  589,  589,  589,
      589,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  640,
      641,  642,  643,  644,  644,  645,  646,  647,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  651,  651,  651,  651,  651,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  652,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  378,  378,  378,  378,  809,  809,  655,
      378,  378,  378,  378,  378,  656,  378,  809,  657,  378,
      378,  378,  809,  378,  378,  809,  378,  378,  378,  659,
      378,  378,  809,  658,  378,  378,  378,  378,  660,  809,
      378,  378,  378,  809,  661,  378,  809,  378,  378,  378,

      378,  662,  378,  378,  378,  378,  809,  378,  378,  378,
      378,  809,  378,  809,  378,  378,  378,  809,  665,  378,
      378,  663,  378,  378,  378,  664,  378,  378,  378,  378,
      378,  378,  809,  378,  809,  809,  666,  809,  378,  667,
      809,  378,  809,  378,  809,  668,  809,  809,  378,  809,
      809,  378,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  207,  207,  207,

      207,  207,  207,  207,  207,  809,  207,  207,  207,  809,
      207,  672,  207,  673,  207,  809,  674,  207,  207,  675,
      207,  809,  207,  809,  207,  207,  207,  207,  207,  207,
      809,  207,  207,  809,  809,  809,  207,  207,  207,  207,
      207,  207,  207,  809,  809,  809,  207,  676,  207,  677,
      678,  207,  207,  679,  207,  207,  207,  207,  207,  680,
      809,  207,  681,  809,  682,  207,  809,  207,  207,  207,
      207,  207,  809,  809,  809,  207,  809,  207,  809,  207,
      683,  207,  590,  590,  590,  590,  590,  809,  809,  207,
      809,  207,  685,  685,  685,  685,  685,  687,  687,  687,

      687,  687,  688,  688,  688,  688,  689,  689,  689,  689,
      689,  207,  207,  470,  470,  470,  470,  470,  718,  718,
      718,  718,  207,  470,  470,  470,  470,  470,  809,  809,
      809,  809,  207,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  691,  691,  691,  691,  691,  692,  692,
      692,  692,  692,  693,  693,  693,  693,  693,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  694,  694,
      694,  694,  694,  695,  695,  695,  695,  695,  696,  696,
      696,  696,  696,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  617,  698,
      698,  698,  698,  698,  809,  809,  809,  495,  809,  809,
      809,  495,  698,  698,  698,  698,  698,  495,  495,  809,
      495,  698,  698,  698,  698,  698,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  292,  292,  292,  292,  292,  292,  292,  292,  809,
      292,  292,  292,  809,  292,  700,  292,  701,  292,  809,
      702,  292,  292,  703,  292,  809,  292,  809,  292,  292,
      292,  292,  292,  292,  809,  292,  292,  809,  809,  809,
      292,  292,  292,  292,  292,  292,  292,  809,  809,  809,

      292,  704,  292,  705,  706,  292,  292,  707,  292,  292,
      292,  292,  292,  708,  809,  292,  709,  809,  710,  292,
      809,  292,  292,  292,  292,  292,  809,  638,  495,  292,
      809,  292,  809,  292,  711,  292,  589,  809,  809,  809,
      589,  809,  809,  292,  809,  292,  589,  589,  589,  589,
      713,  639,  639,  639,  639,  639,  715,  715,  715,  715,
      715,  717,  717,  717,  717,  717,  719,  719,  719,  719,
      719,  292,  292,  721,  721,  721,  721,  721,  809,  809,
      809,  713,  292,  721,  721,  721,  721,  721,  809,  809,
      809,  809,  292,  721,  721,  721,  721,  721,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  378,  378,  378,  378,  378,  378,  378,
      378,  809,  378,  378,  378,  809,  378,  723,  378,  724,
      378,  809,  725,  378,  378,  726,  378,  809,  378,  809,
      378,  378,  378,  378,  378,  378,  809,  378,  378,  809,
      809,  809,  378,  378,  378,  378,  378,  378,  378,  809,
      809,  809,  378,  727,  378,  728,  729,  378,  378,  730,
      378,  378,  378,  378,  378,  731,  809,  378,  732,  809,
      733,  378,  809,  378,  378,  378,  378,  378,  378,  378,
      809,  378,  809,  378,  809,  378,  734,  378,  809,  378,

      207,  207,  207,  207,  809,  378,  809,  378,  809,  378,
      809,  207,  809,  207,  207,  207,  207,  207,  207,  207,
      809,  207,  809,  207,  809,  207,  809,  207,  809,  736,
      207,  207,  809,  735,  809,  207,  809,  207,  809,  207,
      809,  207,  207,  207,  809,  207,  207,  737,  207,  207,
      809,  207,  809,  207,  809,  738,  207,  809,  740,  207,
      207,  207,  809,  207,  207,  207,  207,  809,  739,  207,
      809,  207,  207,  207,  809,  207,  809,  741,  207,  207,
      809,  207,  809,  207,  743,  742,  809,  809,  809,  207,
      809,  809,  809,  207,  590,  590,  590,  590,  590,  207,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  744,  744,  744,  744,  744,
      745,  745,  745,  745,  745,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      292,  292,  292,  292,  292,  292,  809,  292,  292,  292,
      292,  292,  809,  292,  809,  292,  292,  292,  292,  809,
      750,  292,  809,  292,  749,  292,  809,  292,  292,  809,
      292,  292,  292,  751,  292,  292,  809,  292,  292,  292,

      809,  809,  292,  809,  752,  292,  809,  809,  754,  292,
      292,  292,  292,  292,  292,  292,  809,  753,  809,  292,
      809,  292,  292,  292,  292,  292,  292,  755,  758,  495,
      809,  292,  809,  292,  756,  809,  292,  757,  639,  639,
      639,  639,  639,  292,  809,  809,  292,  809,  809,  589,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  759,  759,  759,  759,  759,
      760,  760,  760,  760,  760,  761,  761,  761,  761,  761,
      378,  378,  378,  378,  378,  378,  809,  378,  378,  378,
      378,  378,  809,  378,  809,  378,  378,  378,  378,  809,

      763,  378,  809,  378,  762,  378,  809,  378,  378,  809,
      378,  378,  378,  764,  378,  378,  809,  378,  378,  378,
      809,  809,  378,  809,  765,  378,  809,  809,  767,  378,
      378,  378,  378,  378,  378,  378,  809,  766,  809,  378,
      809,  378,  378,  378,  378,  378,  378,  768,  207,  207,
      809,  378,  809,  378,  769,  809,  378,  770,  809,  207,
      207,  207,  809,  378,  207,  207,  378,  207,  207,  207,
      771,  207,  772,  207,  207,  207,  207,  207,  207,  809,
      774,  207,  207,  207,  207,  207,  809,  207,  207,  207,
      207,  773,  809,  207,  207,  207,  207,  207,  809,  809,

      207,  809,  809,  207,  809,  809,  207,  809,  809,  809,
      207,  775,  775,  775,  775,  775,  207,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  292,  292,  292,
      292,  292,  292,  292,  292,  809,  292,  292,  292,  777,
      292,  809,  292,  809,  292,  292,  292,  292,  292,  776,
      292,  778,  292,  809,  292,  809,  292,  292,  779,  292,
      292,  292,  292,  292,  292,  809,  292,  758,  495,  809,
      292,  809,  292,  809,  292,  780,  780,  780,  780,  780,
      292,  809,  292,  809,  292,  809,  809,  809,  589,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  378,

      378,  378,  378,  378,  378,  378,  378,  809,  378,  378,
      378,  782,  378,  809,  378,  809,  378,  378,  378,  378,
      378,  781,  378,  783,  378,  809,  378,  809,  378,  378,
      784,  378,  378,  378,  378,  378,  378,  809,  378,  207,
      207,  809,  378,  809,  378,  809,  378,  207,  207,  785,
      207,  809,  378,  809,  378,  809,  378,  809,  207,  809,
      207,  207,  207,  207,  207,  292,  292,  809,  786,  292,
      292,  809,  207,  809,  207,  789,  292,  809,  787,  809,
      292,  809,  207,  788,  207,  809,  292,  292,  292,  809,
      790,  292,  292,  809,  809,  378,  378,  809,  292,  378,

      378,  809,  292,  809,  791,  793,  378,  809,  292,  809,
      378,  792,  292,  378,  378,  809,  378,  378,  378,  809,
      794,  207,  207,  809,  378,  809,  809,  809,  378,  809,
      795,  809,  207,  809,  378,  207,  207,  796,  378,  207,
      207,  809,  207,  207,  207,  809,  207,  809,  797,  809,
      207,  292,  292,  798,  207,  809,  207,  292,  292,  809,
      207,  809,  292,  809,  207,  292,  292,  809,  292,  809,
      799,  809,  292,  292,  292,  809,  292,  809,  292,  378,
      378,  378,  378,  800,  292,  809,  292,  809,  378,  378,
      378,  809,  378,  809,  292,  378,  378,  207,  207,  378,

      378,  801,  378,  207,  207,  802,  378,  809,  207,  378,
      292,  292,  292,  292,  207,  803,  378,  809,  207,  378,
      378,  292,  809,  292,  207,  378,  378,  809,  804,  809,
      378,  292,  809,  292,  207,  207,  378,  805,  207,  207,
      378,  292,  292,  378,  378,  207,  378,  809,  809,  207,
      809,  806,  292,  809,  378,  207,  292,  292,  807,  207,
      808,  809,  292,  809,  378,  378,  378,  292,  809,  809,
      809,  809,  809,  809,  809,  809,  378,  292,  809,  809,
      809,  809,  809,  809,  809,  809,  378,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  207,
      809,  809,  809,  809,  809,  207,  216,  809,  809,  809,
      809,  809,  216,  281,  281,  281,  809,  281,  281,  292,
      809,  809,  809,  292,  809,  809,  809,  809,  809,  292,
      301,  809,  809,  809,  809,  809,  301,  337,  337,  809,

      809,  809,  337,  337,  337,  337,  337,  809,  337,  343,
      343,  809,  809,  809,  343,  343,  343,  343,  343,  809,
      343,  349,  349,  809,  809,  349,  349,  349,  349,  809,
      349,  349,  349,  353,  353,  809,  809,  353,  353,  353,
      353,  353,  353,  353,  353,  373,  809,  809,  809,  809,
      373,  373,  373,  373,  809,  373,  373,  378,  809,  809,
      809,  809,  809,  378,  387,  809,  809,  809,  809,  809,
      387,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  470,  809,  809,  809,  470,  809,
      809,  809,  809,  809,  470,  479,  809,  809,  809,  809,
      809,  479,  495,  495,  495,  495,  495,  495,  495,  809,
      495,  809,  495,  495,  589,  589,  809,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,   19,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809
    } ;

static yyconst flex_int16_t yy_chk[4230] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3,    4,    4,    4,  647,    3,    9,    9,
        4,    5,    5,    5,    3,   10,   10,    4,    5,    6,
        6,    6,    7,    7,  598,    5,    6,   32,    8,    8,
      535,   32,    7,    6,   11,   11,   11,    7,    8,   12,
       12,   12,  534,    8,   21,   21,   21,   37,   67,   67,
       11,   37,   37,   91,   91,   12,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   15,   15,   15,
       41,   22,  533,   42,   15,   15,   43,   44,  100,   15,
       23,   23,   15,  100,   22,   15,   15,   15,   15,   15,
       22,   41,   41,   23,   42,  158,  158,   43,   44,   23,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  196,  196,
       15,   16,   16,   16,   16,  532,   38,  531,   38,   16,
       16,   65,   65,   65,   16,   38,   38,   16,   49,   49,
       16,   16,   16,   16,   16,   36,   38,   38,   36,   49,
       52,   52,   36,   36,   36,  101,  487,   49,  478,   49,
      101,   52,   89,   89,   89,   52,   36,   52,   36,  106,
      448,   52,  211,  211,  106,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   27,   27,   50,   50,
       51,   51,   53,   53,   50,   63,  447,   27,  134,   50,
      107,   51,  134,   53,  446,  107,   50,   27,   51,   50,
       53,   51,  121,   53,   53,  144,   63,  121,   54,   54,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   54,
       55,   55,   56,   56,   57,   57,  144,   58,   58,   54,

      445,   55,   56,   56,   57,   57,   74,  171,   58,   58,
      231,   55,  171,   56,  231,   57,   58,   57,   58,   59,
       59,   64,   64,   64,   64,   64,   70,   70,   70,   70,
       59,   59,   66,   66,   66,   66,   66,  423,  143,  395,
       59,   68,   68,   68,   68,   68,   69,   69,   69,   69,
       69,   71,   71,   71,   71,   71,   73,   73,   73,  143,
      143,   73,   94,   94,   94,   94,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   77,   77,   78,   78,   79,   79,
       81,   81,   78,  181,  386,   77,  374,   78,  181,   79,

      372,   81,  371,   77,   78,   77,   79,   78,   81,   79,
      139,   81,   81,  370,  139,  139,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   76,   80,   80,   82,   82,
      156,  156,  156,   83,   83,   84,   84,   80,  369,   82,
      124,   80,  365,   80,   83,   84,   84,   80,  145,   82,
      146,   76,   76,  124,   83,  154,   84,   85,   85,  124,
      125,  125,   76,   86,   86,  220,  220,   85,   85,  145,
      364,  146,   76,  125,   86,   86,  154,  355,   85,  125,
       85,  309,   86,  300,   86,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   87,   87,   88,   88,   88,   88,

       88,  160,  160,  160,  160,   87,   87,   90,   90,   90,
       90,   90,  194,  194,  194,   87,   92,   92,   92,   92,
       92,   93,   93,   93,   93,   93,   95,   95,   95,   95,
       95,  123,  123,  123,  244,  290,  127,  127,  235,  123,
      123,  286,  286,  123,  233,  123,  123,  127,  232,  123,
      155,  155,  155,  155,  155,  244,  244,  127,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  129,  129,  201,
      201,  201,  138,  247,  224,  138,  296,  296,  129,  138,
      138,  138,  140,  215,  140,  209,  209,  209,  129,  305,
      305,  140,  140,  138,  247,  138,  157,  157,  157,  157,

      157,  203,  140,  140,  159,  159,  159,  159,  159,  161,
      161,  161,  161,  161,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  180,  180,  362,  182,  182,  184,  184,  183,
      183,  186,  186,  180,  200,  183,  182,  166,  184,  362,
      183,  164,  186,  180,  182,  184,  182,  183,  184,  186,
      183,  162,  186,  186,  185,  185,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  185,  187,  187,  152,  185,
      148,  185,  188,  188,  249,  185,  141,  187,  189,  189,
      190,  190,  137,  188,  135,  191,  191,  187,  189,  189,

      190,  190,  130,  188,  120,  249,  191,  191,  118,  189,
      242,  190,  242,  190,  191,  242,  191,  192,  192,  193,
      193,  193,  193,  193,  198,  198,  198,  198,  192,  192,
      195,  195,  195,  195,  195,  218,  218,  218,  192,  197,
      197,  197,  197,  197,  199,  199,  199,  199,  199,  204,
      204,  204,  205,  205,  205,  116,  206,  382,  382,  207,
      207,  243,  204,  243,  113,  205,  243,  112,  204,  206,
      207,  205,  284,  284,  284,  206,  213,  213,  213,  213,
      207,  208,  208,  208,  208,  208,  210,  210,  210,  210,
      210,  212,  212,  212,  212,  212,  214,  214,  214,  214,

      214,  217,  217,  217,  217,  217,  219,  219,  219,  219,
      219,  221,  221,  221,  221,  221,  222,  222,  222,  222,
      223,  223,  223,  223,  223,  225,  225,  226,  226,  240,
      363,  251,  234,  111,  240,  240,  225,  105,  226,  234,
      234,  270,  240,  240,   99,  363,  225,  240,  226,  240,
      234,  234,  251,  240,  240,  241,   96,  241,  253,  253,
      254,  254,  270,   72,  241,  241,  255,  255,  253,  253,
       61,  254,   46,  256,  256,  241,  241,  255,   28,  253,
      254,  254,   19,  255,  256,  257,  257,  255,  258,  258,
        0,  259,  259,    0,  256,    0,  257,  258,    0,  258,

      260,  260,  259,  261,  261,  257,  257,  262,  262,  258,
      259,  260,  259,    0,  261,  263,  263,  260,  262,  262,
        0,  260,  264,  264,  261,    0,  263,    0,  262,  265,
      265,  391,  391,  264,    0,  263,  263,  264,  266,  266,
      265,    0,  265,  264,  267,  267,  271,  271,  266,  266,
      265,  268,  268,  474,  474,  267,    0,  271,    0,  266,
      281,    0,  268,    0,  268,  267,    0,  271,  267,  294,
      294,  294,  268,  272,  272,  272,  272,  272,  273,  273,
      273,  273,  273,  274,  274,  274,  274,  274,  275,  275,
      275,  275,  275,  276,  276,  276,  276,  276,  277,  277,

      277,  277,  277,  278,  278,  278,  278,  278,  279,  279,
      279,  279,  279,  280,  280,  280,  483,  483,  280,    0,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  283,  283,
      283,  283,  283,  285,  285,  285,  285,  285,  287,  287,
      287,  287,  287,  288,  288,  288,  288,  289,  289,  289,
      289,  289,  291,  293,  293,  293,  293,  293,  301,  594,
      594,  292,  292,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  292,  643,  643,  291,  295,  295,  295,  295,
      295,    0,  292,  297,  297,  297,  297,  297,  298,  298,

      298,  298,  299,  299,  299,  299,  299,  302,  302,  302,
      302,  302,  303,  303,  303,    0,  291,  304,  304,  304,
      304,  304,  306,  306,  306,  306,  306,    0,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  307,  307,  307,
      307,  308,  308,  308,  308,  308,  310,  310,  311,  311,
      312,  312,  313,  313,    0,  315,  315,  310,    0,  311,
      312,  312,    0,  313,  314,  314,  315,  310,    0,  311,
        0,  312,  313,  313,    0,  314,  315,  316,  316,    0,
        0,  314,  317,  317,    0,  314,    0,    0,  316,  318,
      318,  317,    0,  317,  319,  319,    0,  316,  316,    0,

      318,  320,  320,  317,    0,  319,  321,  321,  318,    0,
      318,  319,  320,  322,  322,  319,    0,  321,  321,    0,
      323,  323,  320,    0,  322,  324,  324,  321,    0,  325,
      325,  323,    0,  322,  322,  323,  324,    0,  324,  325,
      325,  323,  326,  326,  327,  327,  324,  328,  328,    0,
      325,    0,    0,  326,    0,  327,    0,  327,  328,  380,
      380,  380,    0,  326,    0,  327,  326,    0,  328,  329,
      329,  329,  329,  329,  330,  330,  330,  330,  330,  331,
      331,  331,  331,  331,  332,  332,  332,  332,  332,  333,
      333,  333,  333,  333,  334,  334,  334,  334,  334,  335,

      335,  335,  335,  335,  336,  336,  336,  336,  336,  359,
      359,  359,  366,    0,    0,  367,  367,  359,  359,  368,
      368,  359,    0,  359,  359,  366,  367,  359,  378,  378,
      368,  366,  384,  384,  384,  384,  367,    0,    0,  378,
      368,  379,  379,  379,  379,  379,  389,  389,  389,  378,
      381,  381,  381,  381,  381,  383,  383,  383,  383,  383,
      385,  385,  385,  385,  385,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  388,  388,  388,  388,  388,  390,
      390,  390,  390,  390,  392,  392,  392,  392,  392,  393,
      393,  393,  393,  394,  394,  394,  394,  394,  396,  396,

      397,  397,  398,  398,  399,  399,    0,  401,  401,  396,
        0,  397,  398,  398,    0,  399,  400,  400,  401,  396,
        0,  397,    0,  398,  399,  399,    0,  400,  401,  402,
      402,    0,    0,  400,  403,  403,    0,  400,    0,    0,
      402,  404,  404,  403,    0,  403,  405,  405,    0,  402,
      402,    0,  404,  406,  406,  403,    0,  405,  407,  407,
      404,    0,  404,  405,  406,  408,  408,  405,    0,  407,
      407,    0,  409,  409,  406,    0,  408,  410,  410,  407,
        0,  411,  411,  409,    0,  408,  408,  409,  410,    0,
      410,  411,  411,  409,  412,  412,  413,  413,  410,  414,

      414,    0,  411,    0,    0,  412,    0,  413,    0,  413,
      414,  472,  472,  472,    0,  412,    0,  413,  412,    0,
      414,  415,  415,  415,  415,  415,  416,  416,  416,  416,
      416,  417,  417,  417,  417,  417,  418,  418,  418,  418,
      418,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      420,  421,  421,  421,  421,  421,  424,  424,  424,  424,
      424,  425,  425,  425,  425,  425,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  428,  428,  428,  428,
      428,  429,  429,  429,  429,  429,  430,  430,  430,  430,
      430,  431,  431,  431,  431,  431,  432,  432,  432,  432,

      432,  433,  433,  433,  433,  433,  434,  434,  434,  434,
      434,  435,  435,  435,  435,  435,  436,  436,  436,  436,
      436,  437,  437,  437,  437,  437,  444,  451,  451,  450,
      450,  452,  452,  444,  444,  450,    0,  451,  451,  452,
      450,    0,  452,    0,  444,  444,  453,  453,  451,    0,
      450,    0,  452,  454,  454,  455,  455,  453,  456,  456,
      457,  457,    0,  454,  454,    0,  455,  453,  457,  456,
        0,  457,  458,  458,  454,    0,  455,  459,  459,  456,
        0,  457,  458,  458,  460,  460,  461,  461,  459,  462,
      462,  463,  463,  458,    0,  460,  461,  461,  459,  459,

      462,    0,  463,  464,  464,  460,  460,  461,  463,    0,
      462,    0,  463,    0,  464,  465,  465,  467,  467,  467,
      467,  467,    0,    0,  464,    0,  465,  481,  481,  481,
      465,  468,  468,  468,  468,  468,  465,  466,  466,    0,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  469,  469,  469,
      469,  469,  470,  471,  471,  471,  471,  471,  473,  473,
      473,  473,  473,  475,  475,  475,  475,  475,  476,  476,
      476,  476,  477,  477,  477,  477,  477,  479,  480,  480,
      480,  480,  480,  482,  482,  482,  482,  482,  484,  484,
      484,  484,  484,  485,  485,  485,  485,  486,  486,  486,
      486,  486,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  490,  490,  490,  490,  490,  491,  491,  491,  491,
      491,  492,  492,  492,  492,  492,    0,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  493,  493,  493,  493,
      493,  494,  494,  494,  494,  494,  496,  497,  497,  497,
      497,  497,  592,  592,  592,  496,  641,  641,  641,  496,
      498,  498,  498,  498,  498,  496,  496,    0,  496,  499,
      499,  499,  499,  499,  500,  500,  500,  500,  500,  501,
      501,  501,  501,  501,  502,  502,  502,  502,  502,  503,
      503,  503,  503,  503,  504,  504,  504,  504,  504,  505,
      505,  505,  505,  505,  506,  506,  506,  506,  506,  507,
      507,  507,  507,  507,  508,  508,  508,  508,  508,  509,
      509,  509,  509,  509,  510,  510,  510,  510,  510,  511,

      511,  512,  512,    0,    0,  511,  513,  513,  514,  514,
      511,  512,  512,    0,  513,  515,  515,  513,    0,  514,
      511,    0,  512,  516,  516,  515,  515,  513,    0,  514,
      517,  517,  518,  518,  516,    0,  515,  519,  519,    0,
      518,  517,    0,  518,  516,  520,  520,  519,  519,  521,
      521,  517,    0,  518,  522,  522,  520,    0,  519,    0,
      521,  523,  523,    0,  522,  522,  520,  520,  524,  524,
      521,  521,  523,  525,  525,  522,  526,  526,    0,  524,
        0,    0,  523,    0,  525,  524,    0,  526,    0,  524,
        0,  526,    0,    0,  525,    0,    0,  526,  527,  527,

        0,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  528,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  530,  530,
      530,  530,  530,  536,  536,  536,  536,  536,  537,  537,
      537,  537,  537,  538,  538,  538,  538,  538,  539,  539,

      539,  539,  539,  540,  540,  540,  540,  540,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  543,  543,
      543,  543,  543,  544,  544,  544,  544,  544,  545,  545,
      545,  545,  545,  546,  546,  546,  546,  546,  547,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  549,  549,
      549,  549,  549,  550,  550,  551,  551,    0,    0,  550,
      552,  552,  553,  553,  550,  551,  551,    0,  552,  554,
      554,  552,    0,  553,  550,    0,  551,  555,  555,  554,
      554,  552,    0,  553,  556,  556,  557,  557,  555,    0,
      554,  558,  558,    0,  557,  556,    0,  557,  555,  559,

      559,  558,  558,  560,  560,  556,    0,  557,  561,  561,
      559,    0,  558,    0,  560,  562,  562,    0,  561,  561,
      559,  559,  563,  563,  560,  560,  562,  564,  564,  561,
      565,  565,    0,  563,    0,    0,  562,    0,  564,  563,
        0,  565,    0,  563,    0,  565,    0,    0,  564,    0,
        0,  565,  566,  566,  566,  566,  566,  567,  567,  567,
      567,  567,  568,  568,  568,  568,  568,  569,  569,  569,
      569,  569,  570,  570,  570,  570,  570,  571,  571,  571,
      571,  571,  572,  572,  572,  572,  572,  573,  573,  573,
      573,  573,  574,  574,  574,  574,  574,  575,  575,  576,

      576,  577,  577,  578,  578,    0,  579,  579,  575,    0,
      576,  575,  577,  577,  578,    0,  578,  579,  575,  579,
      576,    0,  577,    0,  578,  580,  580,  579,  581,  581,
        0,  582,  582,    0,    0,    0,  580,  583,  583,  581,
      584,  584,  582,    0,    0,    0,  580,  580,  583,  581,
      582,  584,  582,  583,  585,  585,  586,  586,  583,  584,
        0,  584,  585,    0,  586,  585,    0,  586,  587,  587,
      588,  588,    0,    0,    0,  585,    0,  586,    0,  587,
      588,  588,  591,  591,  591,  591,  591,    0,    0,  587,
        0,  588,  593,  593,  593,  593,  593,  595,  595,  595,

      595,  595,  596,  596,  596,  596,  597,  597,  597,  597,
      597,  599,  599,  600,  600,  600,  600,  600,  645,  645,
      645,  645,  599,  601,  601,  601,  601,  601,    0,    0,
        0,    0,  599,  602,  602,  602,  602,  602,  603,  603,
      603,  603,  603,  604,  604,  604,  604,  604,  605,  605,
      605,  605,  605,  606,  606,  606,  606,  606,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  609,  609,
      609,  609,  609,  610,  610,  610,  610,  610,  611,  611,
      611,  611,  611,  612,  612,  612,  612,  612,  613,  613,
      613,  613,  613,  614,  614,  614,  614,  614,  615,  615,

      615,  615,  615,  616,  616,  616,  616,  616,  617,  618,
      618,  618,  618,  618,    0,    0,    0,  617,    0,    0,
        0,  617,  619,  619,  619,  619,  619,  617,  617,    0,
      617,  620,  620,  620,  620,  620,  621,  621,  621,  621,
      621,  622,  622,  622,  622,  622,  623,  623,  623,  623,
      623,  624,  624,  625,  625,  626,  626,  627,  627,    0,
      628,  628,  624,    0,  625,  624,  626,  626,  627,    0,
      627,  628,  624,  628,  625,    0,  626,    0,  627,  629,
      629,  628,  630,  630,    0,  631,  631,    0,    0,    0,
      629,  632,  632,  630,  633,  633,  631,    0,    0,    0,

      629,  629,  632,  630,  631,  633,  631,  632,  634,  634,
      635,  635,  632,  633,    0,  633,  634,    0,  635,  634,
        0,  635,  636,  636,  637,  637,    0,  638,  638,  634,
        0,  635,    0,  636,  637,  637,  638,    0,    0,    0,
      638,    0,    0,  636,    0,  637,  638,  638,  638,  638,
      638,  640,  640,  640,  640,  640,  642,  642,  642,  642,
      642,  644,  644,  644,  644,  644,  646,  646,  646,  646,
      646,  648,  648,  649,  649,  649,  649,  649,    0,    0,
        0,  638,  648,  650,  650,  650,  650,  650,    0,    0,
        0,    0,  648,  651,  651,  651,  651,  651,  652,  652,

      652,  652,  652,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  655,  655,  656,  656,  657,  657,  658,
      658,    0,  659,  659,  655,    0,  656,  655,  657,  657,
      658,    0,  658,  659,  655,  659,  656,    0,  657,    0,
      658,  660,  660,  659,  661,  661,    0,  662,  662,    0,
        0,    0,  660,  663,  663,  661,  664,  664,  662,    0,
        0,    0,  660,  660,  663,  661,  662,  664,  662,  663,
      665,  665,  666,  666,  663,  664,    0,  664,  665,    0,
      666,  665,    0,  666,  667,  667,  668,  668,  669,  669,
        0,  665,    0,  666,    0,  667,  668,  668,    0,  669,

      670,  670,  672,  672,    0,  667,    0,  668,    0,  669,
        0,  670,    0,  672,  673,  673,  674,  674,  675,  675,
        0,  670,    0,  672,    0,  673,    0,  674,    0,  675,
      676,  676,    0,  674,    0,  673,    0,  674,    0,  675,
        0,  676,  677,  677,    0,  678,  678,  676,  679,  679,
        0,  676,    0,  677,    0,  677,  678,    0,  679,  679,
      680,  680,    0,  677,  681,  681,  678,    0,  678,  679,
        0,  680,  682,  682,    0,  681,    0,  680,  683,  683,
        0,  680,    0,  682,  682,  681,    0,    0,    0,  683,
        0,    0,    0,  682,  684,  684,  684,  684,  684,  683,

      685,  685,  685,  685,  685,  686,  686,  686,  686,  686,
      687,  687,  687,  687,  687,  688,  688,  688,  688,  688,
      689,  689,  689,  689,  689,  690,  690,  690,  690,  690,
      691,  691,  691,  691,  691,  692,  692,  692,  692,  692,
      693,  693,  693,  693,  693,  694,  694,  694,  694,  694,
      695,  695,  695,  695,  695,  696,  696,  696,  696,  696,
      698,  698,  700,  700,  701,  701,    0,  702,  702,  703,
      703,  698,    0,  700,    0,  701,  704,  704,  702,    0,
      703,  698,    0,  700,  702,  701,    0,  704,  702,    0,
      703,  705,  705,  704,  706,  706,    0,  704,  707,  707,

        0,    0,  705,    0,  705,  706,    0,    0,  707,  707,
      708,  708,  705,  709,  709,  706,    0,  706,    0,  707,
        0,  708,  711,  711,  709,  710,  710,  708,  713,  713,
        0,  708,    0,  711,  709,    0,  710,  710,  714,  714,
      714,  714,  714,  711,    0,    0,  710,    0,    0,  713,
      715,  715,  715,  715,  715,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  717,  718,  718,  718,  718,  718,
      719,  719,  719,  719,  719,  720,  720,  720,  720,  720,
      721,  721,  723,  723,  724,  724,    0,  725,  725,  726,
      726,  721,    0,  723,    0,  724,  727,  727,  725,    0,

      726,  721,    0,  723,  725,  724,    0,  727,  725,    0,
      726,  728,  728,  727,  729,  729,    0,  727,  730,  730,
        0,    0,  728,    0,  728,  729,    0,    0,  730,  730,
      731,  731,  728,  732,  732,  729,    0,  729,    0,  730,
        0,  731,  734,  734,  732,  733,  733,  731,  735,  735,
        0,  731,    0,  734,  732,    0,  733,  733,    0,  735,
      736,  736,    0,  734,  737,  737,  733,  739,  739,  735,
      735,  736,  737,  738,  738,  737,  740,  740,  739,    0,
      739,  736,  741,  741,  738,  737,    0,  740,  739,  742,
      742,  738,    0,  741,  738,  743,  743,  740,    0,    0,

      742,    0,    0,  741,    0,    0,  743,    0,    0,    0,
      742,  744,  744,  744,  744,  744,  743,  745,  745,  745,
      745,  745,  746,  746,  746,  746,  746,  749,  749,  750,
      750,  751,  751,  752,  752,    0,  754,  754,  749,  751,
      750,    0,  751,    0,  752,  753,  753,  754,  749,  749,
      750,  752,  751,    0,  752,    0,  753,  754,  753,  755,
      755,  756,  756,  757,  757,    0,  753,  758,  758,    0,
      755,    0,  756,    0,  757,  759,  759,  759,  759,  759,
      755,    0,  756,    0,  757,    0,    0,    0,  758,  760,
      760,  760,  760,  760,  761,  761,  761,  761,  761,  762,

      762,  763,  763,  764,  764,  765,  765,    0,  767,  767,
      762,  764,  763,    0,  764,    0,  765,  766,  766,  767,
      762,  762,  763,  765,  764,    0,  765,    0,  766,  767,
      766,  768,  768,  769,  769,  770,  770,    0,  766,  771,
      771,    0,  768,    0,  769,    0,  770,  772,  772,  771,
      771,    0,  768,    0,  769,    0,  770,    0,  772,    0,
      771,  773,  773,  774,  774,  776,  776,    0,  772,  777,
      777,    0,  773,    0,  774,  776,  776,    0,  773,    0,
      777,    0,  773,  774,  774,    0,  776,  778,  778,    0,
      777,  779,  779,    0,    0,  781,  781,    0,  778,  782,

      782,    0,  779,    0,  778,  781,  781,    0,  778,    0,
      782,  779,  779,  783,  783,    0,  781,  784,  784,    0,
      782,  785,  785,    0,  783,    0,    0,    0,  784,    0,
      783,    0,  785,    0,  783,  786,  786,  784,  784,  787,
      787,    0,  785,  788,  788,    0,  786,    0,  786,    0,
      787,  789,  789,  788,  788,    0,  786,  790,  790,    0,
      787,    0,  789,    0,  788,  791,  791,    0,  790,    0,
      790,    0,  789,  792,  792,    0,  791,    0,  790,  793,
      793,  795,  795,  792,  792,    0,  791,    0,  794,  794,
      793,    0,  795,    0,  792,  796,  796,  797,  797,  794,

      793,  794,  795,  798,  798,  796,  796,    0,  797,  794,
      799,  799,  800,  800,  798,  797,  796,    0,  797,  801,
      801,  799,    0,  800,  798,  802,  802,    0,  799,    0,
      801,  799,    0,  800,  803,  803,  802,  801,  806,  806,
      801,  804,  804,  805,  805,  803,  802,    0,    0,  806,
        0,  803,  804,    0,  805,  803,  807,  807,  804,  806,
      805,    0,  804,    0,  805,  808,  808,  807,    0,    0,
        0,    0,    0,    0,    0,    0,  808,  807,    0,    0,
        0,    0,    0,    0,    0,    0,  808,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  816,
        0,    0,    0,    0,    0,  816,  817,    0,    0,    0,
        0,    0,  817,  818,  818,  818,    0,  818,  818,  819,
        0,    0,    0,  819,    0,    0,    0,    0,    0,  819,
      820,    0,    0,    0,    0,    0,  820,  821,  821,    0,

        0,    0,  821,  821,  821,  821,  821,    0,  821,  822,
      822,    0,    0,    0,  822,  822,  822,  822,  822,    0,
      822,  823,  823,    0,    0,  823,  823,  823,  823,    0,
      823,  823,  823,  824,  824,    0,    0,  824,  824,  824,
      824,  824,  824,  824,  824,  825,    0,    0,    0,    0,
      825,  825,  825,  825,    0,  825,  825,  826,    0,    0,
        0,    0,    0,  826,  827,    0,    0,    0,    0,    0,
      827,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  831,    0,    0,    0,  831,    0,
        0,    0,    0,    0,  831,  832,    0,    0,    0,    0,
        0,  832,  833,  833,  833,  833,  833,  833,  833,    0,
      833,    0,  833,  833,  834,  834,    0,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 810 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4159 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 25:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
	    std::string str = "Can\'t convert \'";
	    str += yytext;
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable())
        {
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
        }
	return scan_throw(ID);
    }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{

  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
	std::string str = "Can\'t convert \'";
	str += yytext;
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer.clear();
      str_opener_column = yylloc.first_column;
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
        scan_step();
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 85:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      unput(yytext[yyleng - 1]);
      --yylloc.last_column;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      unput('\'');
      yylloc.last_column--;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 93:
case 94:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 95:
case 96:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, b] and plus here is unary
    // the space is non coding:
    // * after any other binary operator __op__
    //   Example : [a __op__ +b]
    // * after brackets or parentheses delimiters
    //   Example : [(1*2*a) +3]
    // * at the beginning of a line
    //   Example : [3 ...
    //              _+2]

    // no need to unput the '+'
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
   else
   {
       unput('+');
       yylloc.last_column--;
   }
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale

    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 100:
YY_RULE_SETUP
{
             // This rule is made to take into account a +... without spaces after plus
             // if one simply ignores the next a situation like this could arise
             // Example
             // =======
             // A = [1 +...
             // 2] 
             //
             // what is meant by the user [1 +2] ? or [1 + 2]
             // simply ignoring the ... would yield the 1st situation [1, 2]
             // We consider this is NOT proper and instead that the user meant a binary plus
             // split is two lines
             // The same rationale applies to minus.

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = PLUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(PLUS);
         }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
             // see {spaces}*{minus}{next} for the rationale

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = MINUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(MINUS);
         }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = TRUE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
      paren_levels.pop();
  }
	YY_BREAK

case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
        // This is important to restore coding spaces as if ... was not present
        unput(' ');
        linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
        {
	    pstBuffer.clear();
	    std::string str = "Can\'t convert \'";
	    str += pstBuffer.c_str();
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.comment = new std::wstring(pwstBuffer);
	pstBuffer.clear();
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
    else
    {
	pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
	str += pstBuffer.c_str();
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 111:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 114:
case 115:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 116:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 123:
case 124:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 125:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 132:
case 133:
YY_RULE_SETUP
{
   //scan_step();
   pstBuffer += yytext;
  }
	YY_BREAK

case 134:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            //return ID;
        }
    }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 144:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 810 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 810 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 809);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
    std::string str;
    switch(token)
    {
        case AND :                   str = "AND";
                                     break;
        case ASSIGN :                str = "ASSIGN";
                                     break;
        case BOOLFALSE :             str = "BOOLFALSE";
                                     break;
        case BOOLTRUE :              str = "BOOLTRUE";
                                     break;
        case BREAK :                 str = "BREAK";
                                     break;
        case CASE :                  str = "CASE";
                                     break;
        case CATCH :                 str = "CATCH";
                                     break;
        case COLON :                 str = "COLON";
                                     break;
        case COMMA :                 str = "COMMA";
                                     break;
        case COMMENT :               str = "COMMENT";
                                     break;
        case CONTINUE :              str = "CONTINUE";
                                     break;
        case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE";
                                     break;
        case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE";
                                     break;
        case CONTROLTIMES :          str = "CONTROLTIMES";
                                     break;
        case DO :                    str = "DO";
                                     break;
        case DOLLAR :                str = "DOLLAR";
                                     break;
        case DOT :                   str = "DOT";
                                     break;
        case DOTLDIVIDE :            str = "DOTLDIVIDE";
                                     break;
        case DOTPOWER :              str = "DOTPOWER";
                                     break;
        case DOTQUOTE :              str = "DOTQUOTE";
                                     break;
        case DOTRDIVIDE :            str = "DOTRDIVIDE";
                                     break;
        case DOTS :                  str = "DOTS";
                                     break;
        case DOTTIMES :              str = "DOTTIMES";
                                     break;
        case ELSE :                  str = "ELSE";
                                     break;
        case ELSEIF :                str = "ELSEIF";
                                     break;
        case END :                   str = "END";
                                     break;
        case ENDFUNCTION :           str = "ENDFUNCTION";
                                     break;
        case EOL :                   str = "EOL";
                                     break;
        case EQ :                    str = "EQ";
                                     break;
        case FLEX_ERROR :            str = "FLEX_ERROR";
                                     break;
        case FOR :                   str = "FOR";
                                     break;
        case FUNCTION :              str = "FUNCTION";
                                     break;
        case GE :                    str = "GE";
                                     break;
        case GT :                    str = "GT";
                                     break;
        case ID :                    str = "ID";
                                     break;
        case IF :                    str = "IF";
                                     break;
        case KRONLDIVIDE :           str = "KRONLDIVIDE";
                                     break;
        case KRONRDIVIDE :           str = "KRONRDIVIDE";
                                     break;
        case KRONTIMES :             str = "KRONTIMES";
                                     break;
        case LBRACE :                str = "LBRACE";
                                     break;
        case LBRACK :                str = "LBRACK";
                                     break;
        case LDIVIDE :               str = "LDIVIDE";
                                     break;
        case LE :                    str = "LE";
                                     break;
        case LPAREN :                str = "LPAREN";
                                     break;
        case LT :                    str = "LT";
                                     break;
        case MINUS :                 str = "MINUS";
                                     break;
        case NE :                    str = "NE";
                                     break;
        case NOT :                   str = "NOT";
                                     break;
        case NUM :                   str = "NUM";
                                     break;
        case OR :                    str = "OR";
                                     break;
        case OROR :                  str = "OROR";
                                     break;
        case OTHERWISE :             str = "OTHERWISE";
                                     break;
        case PLUS :                  str = "PLUS";
                                     break;
        case POWER :                 str = "POWER";
                                     break;
        case QUOTE :                 str = "QUOTE";
                                     break;
        case RBRACE :                str = "RBRACE";
                                     break;
        case RBRACK :                str = "RBRACK";
                                     break;
        case RDIVIDE :               str = "RDIVIDE";
                                     break;
        case RETURN :                str = "RETURN";
                                     break;
        case RPAREN :                str = "RPAREN";
                                     break;
        case SELECT :                str = "SELECT";
                                     break;
        case SEMI :                  str = "SEMI";
                                     break;
        case SPACES :                str = "SPACES";
                                     break;
        case STR :                   str = "STR";
                                     break;
        case SWITCH :                str = "SWITCH";
                                     break;
        case THEN :                  str = "THEN";
                                     break;
        case TIMES :                 str = "TIMES";
                                     break;
        case TRY :                   str = "TRY";
                                     break;
        case VARFLOAT :              str = "VARFLOAT";
                                     break;
        case VARINT :                str = "VARINT";
                                     break;
        case WHILE :                 str = "WHILE";
                                     break;
        default :                    str = "UNKNOWN";
                                     break;
    }
    return str;

}
#endif

